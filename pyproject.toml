[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "buffetbot"
version = "1.0.0"
description = "A modular Python toolkit for evaluating companies and stocks using value investing principles"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Jose Alvarez de Lugo", email = "josepluton+buffetbot@gmail.com"},
]
keywords = ["finance", "investing", "analysis", "value-investing", "stocks"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
]

dependencies = [
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "yfinance>=0.2.36",
    "plotly>=5.18.0",
    "matplotlib>=3.7.0",
    "streamlit>=1.32.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.12.0",
    "flake8>=7.0.0",
    "isort>=5.13.0",
    "mypy>=1.8.0",
    "pre-commit>=3.5.0",
]

docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=2.0.0",
]

# Entry points for command line interfaces
[project.scripts]
buffetbot = "buffetbot.cli:main"
buffetbot-dashboard = "buffetbot.dashboard.app:main"

[project.urls]
Homepage = "https://github.com/your-username/buffetbot"
Documentation = "https://buffetbot.readthedocs.io"
Repository = "https://github.com/your-username/buffetbot.git"
Issues = "https://github.com/your-username/buffetbot/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["*"]
exclude = ["tests*", "*.tests*", "archive*", "venv*", "build*", "dist*", ".*"]

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.json", "*.yaml", "*.yml"]

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.10"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
strict_equality = false
ignore_missing_imports = true
show_error_codes = true

# Exclude problematic files/directories
exclude = [
    "^venv/.*",
    "^build/.*",
    "^dist/.*",
    "^\\.venv/.*",
    "^setup\\.py$"
]

[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long
    "W503",  # line break before binary operator
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method
    "D200",  # One-line docstring should fit on one line
    "D401",  # First line should be in imperative mood
    "F401",  # imported but unused (let isort handle this)
    "F841",  # local variable assigned but never used
    "C901",  # too complex
    "B007",  # Loop control variable not used
    "B001",  # Do not use bare except
    "E722",  # Do not use bare except
]
per-file-ignores = [
    "dashboard/app.py:E402,F401,D100",
    "tests/*:D100,D101,D102,D103,F401",
    "__init__.py:F401",
    "setup.py:D100",
    "cli.py:D100",
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    ".venv",
    "venv",
    ".mypy_cache",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "build", "dist"]
skips = ["B101", "B601", "B602"]  # Skip assert statements and shell injections for dev

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=buffetbot",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-fail-under=60",  # Reduced from 80% for development
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/examples/*",
    "*/__init__.py",
    "*/setup.py",
    "venv/*",
    "build/*",
    "dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]
